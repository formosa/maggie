# setup.ps1
# PowerShell setup script for Maggie AI Assistant on Windows

# Check if running as administrator
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
if (-not $isAdmin) {
    Write-Host "This script should be run as Administrator. Please restart with admin privileges." -ForegroundColor Red
    exit 1
}

# Create directories
$dirs = @(
    "logs",
    "models",
    "models/tts",
    "models/tts/en_US-kathleen-medium",
    "recipes",
    "templates"
)

foreach ($dir in $dirs) {
    if (-not (Test-Path $dir)) {
        New-Item -Path $dir -ItemType Directory -Force | Out-Null
        Write-Host "Created directory: $dir" -ForegroundColor Green
    } else {
        Write-Host "Directory already exists: $dir" -ForegroundColor Yellow
    }
}

# Check specifically for Python 3.10
try {
    $pythonVersion = python --version 2>&1
    if ($pythonVersion -match "Python 3\.10\.\d+") {
        Write-Host "Found $pythonVersion - Compatible version" -ForegroundColor Green
    } else {
        Write-Host "Incompatible Python version: $pythonVersion" -ForegroundColor Red
        Write-Host "Maggie requires Python 3.10.x specifically. Other versions will not work." -ForegroundColor Red
        Write-Host "Please install Python 3.10 from https://www.python.org/downloads/release/python-3104/" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "Python not found. Please install Python 3.10.x from https://www.python.org/downloads/release/python-3104/" -ForegroundColor Red
    exit 1
}

# Check for CUDA
try {
    $nvccVersion = nvcc --version 2>&1
    if ($nvccVersion -match "release 11\.8") {
        Write-Host "Found CUDA 11.8" -ForegroundColor Green
    } else {
        Write-Host "Warning: CUDA 11.8 is recommended, but found different version" -ForegroundColor Yellow
    }
} catch {
    Write-Host "CUDA not found. Please install CUDA 11.8 from https://developer.nvidia.com/cuda-11-8-0-download-archive" -ForegroundColor Yellow
}

# Create virtual environment
Write-Host "Creating virtual environment..." -ForegroundColor Cyan
if (Test-Path "venv") {
    Write-Host "Virtual environment already exists" -ForegroundColor Yellow
} else {
    python -m venv venv
    Write-Host "Virtual environment created" -ForegroundColor Green
}

# Activate virtual environment
Write-Host "Activating virtual environment..." -ForegroundColor Cyan
& ".\venv\Scripts\Activate.ps1"

# Install dependencies
Write-Host "Installing dependencies..." -ForegroundColor Cyan
pip install --upgrade pip
pip install -e ".[gpu]"

# Create example config
if (-not (Test-Path "config.yaml")) {
    if (Test-Path "config.yaml.example") {
        Copy-Item -Path "config.yaml.example" -Destination "config.yaml"
        Write-Host "Created config.yaml from example" -ForegroundColor Green
    } else {
        Write-Host "Warning: config.yaml.example not found, cannot create config.yaml" -ForegroundColor Yellow
    }
} else {
    Write-Host "config.yaml already exists" -ForegroundColor Yellow
}

# Remind about model downloads
Write-Host "`nSetup completed!" -ForegroundColor Green
Write-Host "`nReminder: You need to download the following models:" -ForegroundColor Cyan
Write-Host "1. Mistral 7B Instruct GPTQ model: https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.3-GPTQ" -ForegroundColor Cyan
Write-Host "2. Piper TTS voice model: https://huggingface.co/rhasspy/piper-voices/tree/main/en/en_US" -ForegroundColor Cyan
Write-Host "`nAnd don't forget to add your Picovoice access key in config.yaml!" -ForegroundColor Cyan
Write-Host "Get a free key at: https://console.picovoice.ai/" -ForegroundColor Cyan

# Ask if user wants to run model downloads
$downloadModels = Read-Host "Would you like to attempt automatic model downloads? (y/n)"
if ($downloadModels -eq "y") {
    # Check for git-lfs
    try {
        $gitLfsVersion = git lfs --version 2>&1
        Write-Host "Found $gitLfsVersion" -ForegroundColor Green
    } catch {
        Write-Host "Installing Git LFS..." -ForegroundColor Cyan
        git lfs install
    }
    
    # Download Mistral model
    $mistralDir = "models/mistral-7b-instruct-v0.3-GPTQ-4bit"
    if (-not (Test-Path $mistralDir)) {
        Write-Host "Downloading Mistral 7B model... (this may take a while)" -ForegroundColor Cyan
        git clone https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.3-GPTQ $mistralDir
    } else {
        Write-Host "Mistral model directory already exists" -ForegroundColor Yellow
    }
    
    # Download Piper TTS voice
    $voiceDir = "models/tts/en_US-kathleen-medium"
    $onnxFile = "$voiceDir/en_US-kathleen-medium.onnx"
    $jsonFile = "$voiceDir/en_US-kathleen-medium.json"
    
    if (-not (Test-Path $onnxFile)) {
        Write-Host "Downloading Piper TTS voice model..." -ForegroundColor Cyan
        $onnxUrl = "https://huggingface.co/rhasspy/piper-voices/resolve/main/en/en_US/kathleen/medium/en_US-kathleen-medium.onnx"
        Invoke-WebRequest -Uri $onnxUrl -OutFile $onnxFile
    } else {
        Write-Host "Piper TTS ONNX file already exists" -ForegroundColor Yellow
    }
    
    if (-not (Test-Path $jsonFile)) {
        $jsonUrl = "https://huggingface.co/rhasspy/piper-voices/resolve/main/en/en_US/kathleen/medium/en_US-kathleen-medium.json"
        Invoke-WebRequest -Uri $jsonUrl -OutFile $jsonFile
    } else {
        Write-Host "Piper TTS JSON file already exists" -ForegroundColor Yellow
    }
}

# Remind about Picovoice key
Write-Host "`nDon't forget to edit config.yaml with your Picovoice access key!" -ForegroundColor Magenta
Write-Host "Get a free key at: https://console.picovoice.ai/" -ForegroundColor Magenta

# Ask if user wants to run the application
$runApp = Read-Host "Would you like to start Maggie now? (y/n)"
if ($runApp -eq "y") {
    Write-Host "Starting Maggie..." -ForegroundColor Cyan
    python main.py
} else {
    Write-Host "`nTo run Maggie later, use:" -ForegroundColor Cyan
    Write-Host ".\venv\Scripts\Activate.ps1" -ForegroundColor Cyan
    Write-Host "python main.py" -ForegroundColor Cyan
}
